cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2)
new_data[,numCols] <- scale(new_data[,numCols])
numCols <- sapply(new_data, is.numeric)
new_data[,numCols] <- scale(new_data[,numCols])
model_knn <- knn(training[,-14], new_data, training$target, k)
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2,
target = NULL)
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2)
numCols <- sapply(new_data, is.numeric)
new_data[,numCols] <- scale(new_data[,numCols])
model_knn <- knn(training[,-14], new_data, training$target, k)
model_knn <- knn(training[,-14], new_data[,-14], training$target, k)
model_knn <- knn(training[,-14], new_data[,-13], training$target, k)
model_knn <- knn(training[,-14], new_data, training$target, k)
any(is.na(new_data))
# Replace missing values with column mean
new_data[is.na(new_data)] <- sapply(new_data, function(x) mean(x, na.rm = TRUE))
# Scale the numeric columns using the mean and standard deviation of the training data
new_data[, numCols] <- scale(new_data[, numCols], center = attr(training[, numCols], "scaled:center"),
scale = attr(training[, numCols], "scaled:scale"))
model_knn <- knn(training[,-14], new_data, training$target, k)
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2,
target = "")
numCols <- sapply(new_data, is.numeric)
new_data[,numCols] <- scale(new_data[,numCols])
any(is.na(new_data))
model_knn <- knn(training[,-14], new_data, training$target, k)
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(class)
numCols <- sapply(training, is.numeric)
training[, numCols] <- scale(training[, numCols])
testing[, numCols] <- scale(testing[, numCols])
k <- 5
model <- knn(training[,-14], testing[,-14], training$target, k)
prediction <- as.factor(model)
prediction
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2)
numCols <- sapply(new_data, is.numeric)
new_data[,numCols] <- scale(new_data[,numCols])
new_prediction <- predict(model, newdata = new_data)
new_prediction <- predict(model, new_data)
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/Heart-Disease-Prediction')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
# checking for outliers
boxplot(data)
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
prediction <- predict(model, testing)
prediction
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Checking Accuracy
confusionMatrix(prediction, testing$target)
# Checking Accuracy
confusionMatrix(factor(prediction, levels = levels(testing$target)), testing$target)
# Checking Accuracy
data$target <- factor(mydata$target, levels = c(0,1), labels = c("False", "True"))
confusionMatrix(prediction, testing$target)
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
# checking for outliers
boxplot(data)
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
prediction <- predict(model, testing)
prediction
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 1.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Checking Accuracy
data$target <- factor(mydata$target, levels = c(0,1), labels = c("False", "True"))
confusionMatrix(prediction, testing$target)
# Importing health disease data
mydata <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Heart Disease Prediction\\heart.csv", sep = ",")
# Studying the Data Set
str(mydata)
head(mydata)
describe(mydata)
# Building a Model
# Split data into training and test data sets
train_index <- createDataPartition(y = mydata$target, p = 0.7, list = FALSE)
training <- mydata[train_index,]
testing <- mydata[-train_index,]
# Checking the dimensions of our training and testing data
dim(training)
dim(testing)
# Checking for any null values
anyNA(mydata)
# Checking the summary of the data
summary(mydata)
# Convert these to categorical variables for factorize them
training[["target"]] = factor(training[["target"]])
# Implementing trainControl() method
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
# train our model
svm_Linear <- train(target ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear
# Predicting the results
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
# Checking the accuracy of the model
confusionMatrix(table(test_pred, testing$target))
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 4.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
# checking for outliers
boxplot(data)
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
prediction <- predict(model, testing)
prediction
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 4.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Checking Accuracy
data$target <- factor(mydata$target, levels = c(0,1), labels = c("False", "True"))
confusionMatrix(table(prediction, testing$target))
confusionMatrix(table(factor(prediction), factor(testing$target)))
confusionMatrix(factor(prediction), factor(testing$target))
# Checking Accuracy
# Convert prediction and testing$target to factors with same levels
prediction <- factor(prediction, levels = levels(factor(testing$target)))
# Create confusion matrix
cm <- confusionMatrix(prediction, testing$target)
# Print confusion matrix
print(cm)
# Importing health disease data
mydata <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
View(mydata)
# Studying the Data Set
str(mydata)
head(mydata)
describe(mydata)
# Data Cleaning
missmap(mydata)
# Setting target variablesas categorical
mydata$target <- factor(mydata$target, levels = c(0,1), labels = c("False", "True"))
# Building a Model
# Split data into training and test data sets
train_index <- createDataPartition(y = mydata$target, p = 0.7, list = FALSE)
training <- mydata[train_index,]
testing <- mydata[-train_index,]
# Checking the dimensions of our training and testing data
dim(training)
dim(testing)
# Checking for any null values
anyNA(mydata)
# Checking the summary of the data
summary(mydata)
# Convert these to categorical variables for factorize them
training[["target"]] = factor(training[["target"]])
# Implementing trainControl() method
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
# train our model
svm_Linear <- svm(target ~., data = training, kernel = "linear", cost = 10)
svm_Linear
# Predicting the results
test_pred <- predict(svm_Linear, newdata = testing)
test_pred
# Checking the accuracy of the model
confusionMatrix(table(test_pred, testing$target))
# define parameter grid
param_grid <- expand.grid(C = c(0.1, 1, 10, 100),
gamma = c(0.01, 0.1, 1, 10))
tune_result <- tune(svm,
target ~.,
data = training,
kernel = "radial",
ranges = param_grid,
tunecontrol = tune.control(sampling = "cross",
cross = 5))
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
# define parameter grid
param_grid <- expand.grid(C = c(0.1, 1, 10, 100),
gamma = c(0.01, 0.1, 1, 10))
tune_result <- tune(svm,
target ~.,
data = training,
kernel = "radial",
ranges = param_grid,
tunecontrol = tune.control(sampling = "cross",
cross = 5))
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
# define parameter grid
param_grid <- expand.grid(C = c(0.1, 1, 10, 100),
gamma = c(0.01, 0.1, 1, 10))
tune_result <- tune(svm,
target ~.,
data = training,
kernel = "radial",
ranges = param_grid,
tunecontrol = tune.control(sampling = "cross",
cross = 5))
best_model <- tune_result$best.model
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 4.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(best_model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
new_data <- data.frame(age = 58,
sex = 0,
cp = 0,
trestbps = 100,
chol = 248,
fbs = 0,
restecg = 0,
thalach = 122,
exang = 0,
oldpeak = 4.0,
slope = 1,
ca = 0,
thal = 2)
new_prediction <- predict(model, new_data)
if (new_prediction > 0.50) {
print("True")
cat(new_prediction)
} else {
print("False")
cat(new_prediction)
}
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
old_prediction <- predict(model, testing)
old_prediction
# Checking Accuracy
accuracy <- function(prediction, real_values){
n_correct = sum(prediction == real_values)
return(n_correct/length(real_values))
}
print(accuracy(old_prediction, testing))
library(neuralnet)
# Loading Data
mydata <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Heart Disease Prediction\\heart.csv", sep = ",")
mydata <- na.omit(mydata)
summary(mydata)
View(mydata)
# Random
mydataRand <- mydata[sample(1025,1025),]
# heart class is a target value
heartClass <- mydataRand[,14]
# heart value is a 13 factors of heart data except target
heartValues <- mydataRand[,-14]
heartClassTrain <- heartClass[1:600]
heartValuesTrain <- heartValues[1:600,]
heartClassTest <- heartClass[601:1025]
heartValuesTest <- heartValues[601:1025,]
set.seed(123)
NN <- neuralnet(heartClassTrain~., heartValuesTrain, hidden = c(3,3), threshold = 0.001)
NN <- neuralnet(heartClassTrain~., heartValuesTrain, hidden = c(3,3), threshold = 0.001)
NN <- neuralnet(heartClassTrain~., heartValuesTrain, hidden = c(3,3), threshold = 0.001)
NN <- neuralnet(heartClassTrain~., heartValuesTrain, hidden = c(3,3), threshold = 0.001)
NN <- neuralnet(heartClassTrain~., heartValuesTrain, hidden = c(3,3), threshold = 0.001)
result <- compute(NN, heartValuesTest)
result$net.result
accu_pred <- as.numeric(result$net.result > 0.5)
print(accu_pred)
accuracy <- function(prediction, real_Values){
n_correct = sum(prediction == real_Values)
return(n_correct/length(real_Values))
}
print(accuracy(accu_pred, heartClassTest))
accu_pred <- as.numeric(result$net.result > 0.5)
# Read Data
data <- read.csv("C:\\Work Profession\\University Files\\Year 3\\Final Year Project\\Old\\heart.csv", sep = ",")
library(caret)
set.seed(123)
# Split data into 70% training and 30% test data sets
train_index <- createDataPartition(y = data$target, p = 0.7, list = FALSE)
training <- data[train_index,]
testing <- data[-train_index,]
library(e1071)
model <- svm(target ~., data = training, kernel = "linear", cost = 10)
old_prediction <- predict(model, testing)
old_prediction
# Checking Accuracy
result <- compute(model, testing)
accu_pred <- as.numeric(result$net.result > 0.5)
print(accu_pred)
accuracy <- function(prediction, real_values){
n_correct = sum(prediction == real_values)
return(n_correct/length(real_values))
}
print(accuracy(accu_pred, testing))
accu_pred <- as.numeric(result$net.result > 0.5)
print(accu_pred)
accuracy <- function(prediction, real_values){
n_correct = sum(prediction == real_values)
return(n_correct/length(real_values))
}
print(accuracy(accu_pred, testing))
shiny::runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
shiny::runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
shiny::runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/Heart-Disease-Prediction')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Sample Project/SVM_Model_Shiny')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Sample Project/SVM_Model_Shiny')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
runApp('C:/Work Profession/University Files/Year 3/Final Year Project/Project/New-Heart-Disease-Prediction')
